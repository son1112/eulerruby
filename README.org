Project Euler Problems

* Problem 1: Multips of 3 and 5

  If we list all the natural numbers below 10 that are multiples of 3 or 5, we 
  get 3,5,6 and 9. The sum of these multiples is 23.

  Find the sum of all the multiples of 3 or 5 below 1000.

  [[./1.rb]]

  #+begin_src ruby :tangle 1.rb
    multiples = (1..999).select{|i| i%3 == 0 || i%5 == 0}

    p multiples.inject(0) {|sum, p| sum+p}
  #+end_src

  #+RESULTS:
  : 233168

  

* Problem 2: Even Fibonacci Numbers

  Each new term in the Fibonacci sequence is generated by adding the previous 
  two terms. By starting with 1 and 2, the first 10 terms will be:

  : 1,2,3,5,8,13,21,34,55,89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed 
  four million, find the sum of the even-valued terms.

  [[./2.rb]]

  #+begin_src ruby :tangel 2.rb
    def fib(n)
      # creates a Fibonacci sequence up to last number <= 4million
      # n = 7

      # [1,2]
      # [1,2,3]
      # [1,2,3,5]
      # [1,2,3,5,8]
      # [1,2,3,5,8,13]
      # [1,2,3,5,8,13,21]
      
      fib = [1,2]
      
      while fib.last <= n
        fib.push (fib.last + fib[(fib.count-2)])
      end
      
      evens = fib.select{|i| i%2==0}

      p evens.inject(0){|sum,x| sum+x}

    end

    fib(4000000)

  #+end_src

* Problem 3: Largest Prime Factor
  
  The prime factors of 13195 are 5, 7, 13 and 29.

  What is the largest prime factor of the number 600851475143?

  [[./3.rb]]

  #+begin_src ruby :tangle 3.rb
    require 'prime'

    def get_factors(n)

      prime_array = []
      p = 2

      if n < 2
        return p
      end

      while p < n
        if n%p == 0 && Prime.prime?(p)
          prime_array.push(p)
          p prime_array
        end
        p +=1
      end

      return prime_array
    end

    p get_factors(600851475143)
  #+end_src

* Problem 4: Largest Palindrome Product

  A palindromic number reads the same both ways. The largest palindrome made
  from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

  Find the largest palindrome made from the product of two 3-digit numbers.

  [[./4.rb]]

  #+begin_src ruby :tangle 4.rb
    def is_palindrome?(n)
      string = n.to_s
      mid = string.length/2

      a = string[0...mid]

      if string.length.even? 
        b = string[mid..-1]
      else
        b = string[mid+1..-1]
      end

      a == b.reverse
    end

    def get_factors_max(high,low)

      prods = {}
      pals = []
      
      high.downto(low).each do |i|
        
        a = i
        b = i
        
        until b == low-1
          if is_palindrome?(a*a)
            puts "PAL"
            prods["#{a}*(#{a})"] = a*a
            puts prods["#{a}*(#{a})"]
            pals.push a*a
          else
            if is_palindrome?(a*(b-1))
              puts "PAL"
              prods["#{a}*(#{b-1})"] = a*(b-1)
              puts prods["#{a}*(#{b-1})"]
              pals.push a*(b-1)
            end
          end
          b = b-1
        end

      end

      max = pals.max

      return pals
    end

    def largest_palindrome

      a = 999.downto(100).to_a
      a2 = a

      high = 999
      highest_possible = 999*999
      low = 100
      lowest_possible = 100*100

      get_factors_max(high,low)
      
    end

    p largest_palindrome
    p largest_palindrome.max
#+end_src

  #+RESULTS:
  : 906609
  
* Problem 5: Smallest Multiple

  2520 is the smallest number that can be divided by each of the numbers 
  from 1 to 10 without any remainder. What is the smallest positive number that
  is /evenly divisible/ by all of the numbers from 1 to 20?

  [[./5.rb]]

  #+begin_src ruby :tangle 5.rb
    i = 20

    while (i%2 != 0 ||
             i%3 != 0 ||
               i%4 != 0 ||
                 i%5 != 0 ||
                   i%6 != 0 ||
                     i%7 != 0 ||
                       i%8 != 0 ||
                         i%9 != 0 ||
                           i%10 != 0 ||
                             i%11 != 0 ||
                               i%12 != 0 ||
                                 i%13 != 0 ||
                                   i%14 != 0 ||
                                     i%15 != 0 ||
                                       i%16 != 0 ||
                                         i%17 != 0 ||
                                           i%18 != 0 ||
                                             i%19 != 0 ||
                                               i%20 != 0) 
        i = i+1
      end

    p i
  #+end_src

  #+RESULTS:
  : 232792560

* Problem 6: Sum Square Difference

  The sum of the squares of the first ten natural numbers is,
  
  : 1^2 + 2^2 + ... + 10^2 = 385

  The square of the sum of the first ten natural numbers is,

  : (1 + 2 + ... + 10)^2 = 55^2 = 3025

  Hence the difference between the sum of the squares of the first ten natural 
  numbers and the square of the sum is 3025 - 385 = 2640.

  Find the difference between the sum of the squares of the first one hundred 
  natural numbers and the square of the sum.

  [[./6.rb]]

  #+begin_src ruby :tangle 6.rb
    range = (1..100)
    squares = range.map { |i| i*i }
    sum_squares = squares.inject(0) { |sum, i| sum + i }

    sum = range.inject(0) { |sum, i| sum + i }

    p sum**2 - sum_squares
  #+end_src

  #+RESULTS:
  : 25164150

